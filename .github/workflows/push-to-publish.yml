name: Electron publish!

on:
  # Sequence of patterns matched against refs/heads
  push:
    branches:    
      - master         # Push events on master branch
    paths:
      - 'dist/**/*'               # match this pattern
      - 'electron-builder.js'     # match this pattern
      - '.github/workflows/*.yml' # or match this pattern
      - '!*.md'                   # but not match this
      - '!**/__fixtures__/**'     # and not match this
      - '!**/__tests__/**'        # and not match this

jobs:
  build:
    name: Build & Publish
    runs-on: ${{ matrix.os }}

    strategy:
      matrix: # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
        # os: [macos-latest]
        os: [macos-latest, ubuntu-latest] # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
        node-version: [12.x]
    # ## functions
    # - https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#functions
    # - https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#contains
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2 # https://github.com/actions/checkout
      with:
        fetch-depth: 1

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1 # https://github.com/actions/setup-node
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get yarn cache directory path
      id: yarn-global-cache-dir-path
      run: echo "::set-output name=dir::$(yarn global dir)"
    - uses: actions/cache@v1
      id: yarn-global-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-global-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-global-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-global-

    - name: (Mac) set codesigning identity
      if: matrix.os == 'macos-latest'
      run: |
        mkdir .secret
        echo "$CSC_LINK" > .secret/id
        openssl base64 -d -in .secret/id -out .secret/id.p12
        security import .secret/id.p12 -P $(cat <<-EOF
        $CSC_KEY_PASSWORD
        EOF)
      env: # https://www.electron.build/code-signing.html#how-to-disable-code-signing-during-the-build-process-on-macos
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
    - name: Check signing identity
      if: matrix.os == 'macos-latest'
      run: security find-identity -v

    - name: yarn global install if necessary
      run: |
        if (! type "electron-builder" > /dev/null) || [ "$(yarn --silent info electron-builder version)" != "$(electron-builder --version)" ]; then
          yarn global add electron-builder
        fi

    - name: Append "yarn global bin directory" to PATH
      id: set-env-yarn-global-bin
      run: echo "::set-env name=PATH::$PATH:$(yarn global bin)"

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v1
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # step "yarn-cache" just restore `cache dir` of yarn & not "node_modules" dirs
    # - name: Install Dependencies
    #   if: steps.yarn-cache.outputs.cache-hit != 'true'
    #   run: /install.sh

    - name: yarn install
      run: |
        yarn install --frozen-lockfile
    - name: electron build # https://www.electron.build/cli
      run: |
        electron-builder build --publish always
      env: # https://help.github.com/en/articles/workflow-syntax-for-github-actions#jobsjob_idstepsenv
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEBUG: electron-builder

    - name: Move artifacts
      if: matrix.os != 'windows-latest'
      run: |
        mkdir artifact
        mv release/{*.deb,*.AppImage,*.dmg,*.yaml} artifact/ || true
    - name: Upload artifacts
      if: failure()
      uses: actions/upload-artifact@v1
      with:
        name: ${{matrix.os}}
        path: artifact

  build-win:
    name: Build & Publish (Windows)
    runs-on: ${{ matrix.os }}

    strategy:
      matrix: # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
        os: [windows-latest] # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
        node-version: [12.x]
    # ## functions
    # - https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#functions
    # - https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#contains
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2 # https://github.com/actions/checkout
      with:
        fetch-depth: 1

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1 # https://github.com/actions/setup-node
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get yarn cache directory path
      id: yarn-global-cache-dir-path
      run: echo "::set-output name=dir::$(yarn global dir)"
    - uses: actions/cache@v1
      id: yarn-global-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-global-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-global-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-global-

    - name: (win) yarn global install if necessary
      run: |
        yarn global add electron-builder electron-builder-squirrel-windows

    # Couldn't make it work on Windows
    - name: Append "yarn global bin directory" to PATH
      id: set-env-yarn-global-bin
      run: echo "::set-env name=PATH::$env:PATH;$(yarn global bin)" # https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
    # - name: "yarn global bin directory"
    #   id: yarn-global-bin
    #   run: echo "::set-output name=dir::$(yarn global bin)"

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v1
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: yarn install
      run: |
        yarn install --frozen-lockfile
    - name: electron build # https://www.electron.build/cli
      run: |
        electron-builder build --publish always
      # ${{ steps.yarn-global-bin.outputs.dir }}/electron-builder build --publish always
      env: # https://help.github.com/en/articles/workflow-syntax-for-github-actions#jobsjob_idstepsenv
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: (win) Check directory
      run: |
        ls release
    - name: (win) Make artifact directory
      run: |
        mkdir artifact
    - name: set path
      run: echo "::set-env name=PATH::$env:PATH;C:\Program Files\Git\bin" # https://github.community/t5/GitHub-Actions/How-do-I-install-bash-on-my-Windows-local-runner/m-p/44151
        
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#using-a-specific-shell
    - name: (win) Move artifacts
      shell: bash
      run: |
        mv release/{*.exe,*.yaml} artifact/ || true
    # - name: Upload artifacts
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: ${{matrix.os}}
    #     path: artifact
    # - name: Cleanup meta files # Reference https://gist.github.com/azu/673426500458f63f019c8f5e013f282a
    #   run: |
    #     npx rimraf "release/!(*.exe|*.deb|*.AppImage|*.dmg)"
    # - uses: actions/upload-artifact@v1
    #   with:
    #     name: my-artifact
    #     path: artifact
